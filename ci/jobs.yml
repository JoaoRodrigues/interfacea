parameters:
  displayName: ''
  pyVersion: ''

stages:
  - stage: "${{ parameters.displayName }}"  # stage names must be unique

    jobs:
      # Linux & macOS
      - job:
        workspace:
            clean: all

        strategy:
          matrix:
            Linux:
              imageName: 'ubuntu-latest'
            macOs:
              imageName: 'macOS-10.14'

        pool:
          vmImage: $(imageName)

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: ${{ parameters.pyVersion }}

          - script: |
              echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH

          # Build environment
          - script: |
              conda update -n base conda pip setuptools -y
              conda create --yes --quiet --name $(condaEnvName) python=${{ parameters.pyVersion }}
              conda env update --name $(condaEnvName) --file devtools/dev-environment.yml
            displayName: Create and Setup Conda Environment
            continueOnError: false

          # OSX-specific
          - bash: sudo chown -R $USER $CONDA
            displayName: Take ownership of conda installation
            condition: eq( variables['Agent.OS'], 'Darwin' )

          # Package Steps
          # Install
          - script: |
              source activate $(condaEnvName)
              python -m pip install -e .
            displayName: Building
            continueOnError: false

          # Linter
          - script: |
              source activate $(condaEnvName)
              flake8 .
            displayName: Linting
            continueOnError: true

          # PyTest (only push to CodeClimate on Linux and master branch commits)
          - script: |
              source activate $(condaEnvName)
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter
              ./cc-test-reporter before-build
            condition: and( eq(variables['Agent.OS'], 'Linux'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI') )
            env:
              GIT_BRANCH: $(Build.SourceBranchName)
              GIT_COMMIT: $(Build.SourceVersion)
              CC_TEST_REPORTER_ID: $(CC_TEST_REPORTER_ID)

          # Run tests for all images/versions
          - script: |
              source activate $(condaEnvName)
              pytest . --cov=interfacea --cov-report=xml
            displayName: Testing

          - script: |
              source activate $(condaEnvName)
              ./cc-test-reporter format-coverage -t coverage.py -o coverage/codeclimate.json coverage.xml
              ./cc-test-reporter upload-coverage
            condition: and( eq(variables['Agent.OS'], 'Linux'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI') )
            env:
              GIT_BRANCH: $(Build.SourceBranchName)
              GIT_COMMIT: $(Build.SourceVersion)
              CC_TEST_REPORTER_ID: $(CC_TEST_REPORTER_ID)

      # Windows
      - job:
        displayName: 'Windows'
        workspace:
            clean: all

        pool:
          vmImage: 'vs2017-win2016'

        steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: ${{ parameters.pyVersion }}

          - powershell: |
              Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
            displayName: add conda to PATH

          # Build environment
          - script: |
              conda update -n base conda pip setuptools -y
              conda create --yes --quiet --name $(condaEnvName) python=${{ parameters.pyVersion }}
              conda env update --name $(condaEnvName) --file devtools/dev-environment.yml
            displayName: Create and Setup Conda Environment
            continueOnError: false

          # Package Steps
          # Install
          - script: |
              call activate $(condaEnvName)
              python -m pip install -e .
            displayName: Building
            continueOnError: false

          # Linter
          - script: |
              call activate $(condaEnvName)
              flake8 .
            displayName: Linting
            continueOnError: true

          # Run tests
          - script: |
              call activate $(condaEnvName)
              pytest . --cov=interfacea --cov-report=xml
            displayName: Testing
